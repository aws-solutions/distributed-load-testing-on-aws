"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsHelper = void 0;
const client_cloudwatch_1 = require("@aws-sdk/client-cloudwatch");
const client_sqs_1 = require("@aws-sdk/client-sqs");
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const types_1 = require("./types");
const client_helper_1 = require("./client-helper");
const axios_1 = __importDefault(require("axios"));
const METRICS_ENDPOINT = "https://metrics.awssolutionsbuilder.com/generic";
const RETRY_LIMIT = 3;
const { EXECUTION_DAY } = process.env;
class MetricsHelper {
    constructor() {
        this.clientHelper = new client_helper_1.ClientHelper();
    }
    async getMetricsData(event) {
        const metricsDataProps = event["metrics-data-query"];
        const endTime = new Date(event.time);
        const input = {
            MetricDataQueries: metricsDataProps,
            StartTime: new Date(endTime.getTime() - (EXECUTION_DAY === types_1.ExecutionDay.DAILY ? 1 : 7) * 86400 * 1000), // 7 or 1 day(s) previous
            EndTime: endTime,
        };
        return await this.fetchMetricsData(input);
    }
    async fetchMetricsData(input) {
        var _a;
        let command = new client_cloudwatch_1.GetMetricDataCommand(input);
        let response;
        const results = {};
        do {
            response = await this.clientHelper.getCwClient().send(command);
            console.info(response);
            (_a = input.MetricDataQueries) === null || _a === void 0 ? void 0 : _a.forEach((item, index) => {
                var _a, _b, _c, _d, _e;
                const key = `${(_b = (_a = item.MetricStat) === null || _a === void 0 ? void 0 : _a.Metric) === null || _b === void 0 ? void 0 : _b.Namespace}/${(_d = (_c = item.MetricStat) === null || _c === void 0 ? void 0 : _c.Metric) === null || _d === void 0 ? void 0 : _d.MetricName}`;
                const value = ((_e = response.MetricDataResults) === null || _e === void 0 ? void 0 : _e[index].Values) || [];
                results[key] = (results[key] || []).concat(...value);
            });
            command = new client_cloudwatch_1.GetMetricDataCommand({ ...input, NextToken: response.NextToken });
        } while (response.NextToken);
        return results;
    }
    processQueryResults(resolvedQueries, body) {
        const failedQueries = [];
        const metricsData = {};
        resolvedQueries.forEach((data, index) => {
            if (data === undefined) {
                failedQueries.push(body.queryIds[index]);
                return;
            }
            if (data.field && data.value) {
                metricsData[data.field] = parseInt(data.value, 10);
            }
        });
        console.debug("Query data: ", JSON.stringify(metricsData, null, 2));
        if (failedQueries.length > 0) {
            const { retry = 0 } = body;
            if (retry < RETRY_LIMIT) {
                body.retry = retry + 1;
                body.queryIds = failedQueries;
                console.debug(`Retrying query resolver. Retry #${retry + 1}`);
                this.sendSQS(body);
            }
            else {
                console.debug("Retries exceeded. Aborting");
            }
        }
        return metricsData;
    }
    async getQueryDefinitions(queryPrefix) {
        const input = {
            queryDefinitionNamePrefix: queryPrefix,
        };
        const command = new client_cloudwatch_logs_1.DescribeQueryDefinitionsCommand(input);
        const response = await this.clientHelper.getCwLogsClient().send(command);
        if (!response.queryDefinitions) {
            return [];
        }
        return response.queryDefinitions;
    }
    async startQueries(event) {
        const queryDefinitions = await this.getQueryDefinitions(process.env.QUERY_PREFIX);
        const endTime = new Date(event.time);
        const queryIds = await Promise.all(queryDefinitions === null || queryDefinitions === void 0 ? void 0 : queryDefinitions.map((queryDefinition) => this.startQuery(queryDefinition, endTime)));
        return await this.sendSQS({ queryIds, endTime: endTime.getTime() });
    }
    async sendSQS(sqsBody) {
        const command = new client_sqs_1.SendMessageCommand({
            MessageBody: JSON.stringify(sqsBody),
            QueueUrl: process.env.SQS_QUEUE_URL,
        });
        return await this.clientHelper.getSqsClient().send(command);
    }
    async startQuery(queryProp, endTime) {
        const input = {
            startTime: endTime.getTime() - (EXECUTION_DAY === types_1.ExecutionDay.DAILY ? 1 : 7) * 86400 * 1000,
            endTime: endTime.getTime(),
            ...queryProp,
        };
        const command = new client_cloudwatch_logs_1.StartQueryCommand(input);
        const response = await this.clientHelper.getCwLogsClient().send(command);
        if (response.queryId) {
            return response.queryId;
        }
        return "";
    }
    async resolveQuery(queryId) {
        var _a;
        const command = new client_cloudwatch_logs_1.GetQueryResultsCommand({ queryId });
        const response = await this.clientHelper.getCwLogsClient().send(command);
        console.debug(`Query response: ${JSON.stringify(response)}`);
        if (response.status === "Running") {
            console.debug(`Query is still running. QueryID: ${queryId}`);
            return undefined;
        }
        return (((_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) ||
            (() => {
                console.debug(`Query contains no results. QueryID: ${queryId}`);
                return [];
            })());
    }
    async resolveQueries(event) {
        const requestBody = JSON.parse(event.Records[0].body);
        const queryIds = requestBody.queryIds;
        if (Object.keys(queryIds).length <= 0)
            return [];
        return (await Promise.all(queryIds.map((queryId) => this.resolveQuery(queryId)))).flat();
    }
    async sendAnonymousMetric(results, startTime, endTime) {
        const result = {
            Message: "",
        };
        try {
            const { SOLUTION_ID, SOLUTION_VERSION, UUID } = process.env;
            const payload = {
                Solution: SOLUTION_ID,
                Version: SOLUTION_VERSION,
                UUID: UUID,
                TimeStamp: new Date().toISOString().replace("T", " ").replace("Z", ""),
                Data: {
                    DataStartTime: startTime.toISOString().replace("T", " ").replace("Z", ""),
                    DataEndTime: endTime.toISOString().replace("T", " ").replace("Z", ""),
                    ...results,
                },
            };
            result.Data = payload;
            const payloadStr = JSON.stringify(payload);
            const config = {
                headers: {
                    "content-type": "application/json",
                    "content-length": payloadStr.length,
                },
            };
            console.info("Sending anonymous metric", payloadStr);
            await axios_1.default.post(METRICS_ENDPOINT, payloadStr, config);
            result.Message = "Anonymous data was sent successfully.";
        }
        catch (err) {
            console.error("Error sending anonymous metric");
            console.error(err);
            result.Message = "Anonymous data sending failed.";
        }
        return result;
    }
}
exports.MetricsHelper = MetricsHelper;
//# sourceMappingURL=data:application/json;base64,